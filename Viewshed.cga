/**
 * File:    Viewshed.cga
 * Created: 13 Nov 2013 16:08:46 GMT
 * Author:  chri7180
 */

version "2015.0"

const assetDirectory = "Tools_Viewshed/"

/*
Notes:
How should camera be represented? As detailed 3D model? or abstract 3D shape?
How is scope/bounding box determined for non-square  
Current camera vector - how should that be represented - how will GIS come in?
*/


#####################
# CAMERA CONTROL

@Group("CAMERA CONTROL",1) @Order(1)
@Range(-180, 180)
attr Pan = 0 # Left pan is negative. Right pan is positive.

@Group("CAMERA CONTROL") @Order(2)
@Range(-90, 90)
attr Tilt = 0

@Group("CAMERA CONTROL") @Order(3)
@Description("Longest practical range of camera focus; past this range is too far away to be useful.")
@Range(5,160)
attr Zoom = 50

#FIX: Make this match actual cameras - what matches 50mm, 35mm, etc.? 
#@Group("CAMERA CONTROL") @Order(4)
#@Range(1,100)
#attr Box_Width = Focal_Range

#FIX: Make this match actual cameras - what matches 50mm, 35mm, etc.? 
@Group("CAMERA CONTROL") @Order(4)
@Range(1,100)
attr Horizontal_View_Angle = 50

@Group("CAMERA CONTROL") @Order(5)
@Description("First number is width; second number is height (relatively).")
@Range("16:9","4:3","1:1")
attr Aspect_Ratio = "16:9"

############################
# CAMERA SETUP

@Group("CAMERA SETUP",2) @Order(1)
@Range(0,10.1)
attr Height = 0

#@Group("CAMERA SETUP") @Order(2)
#@Description("Start rotation of 0 is north, and rotates clockwise. (in degrees)")
#@Range(0,360)
#attr Pan_Start = 0

#@Group("CAMERA SETUP") @Order(3)
#@Description("[TEMP!] Range of rotation from start point, in both directions. (degrees)")
#@Range(90, -90)
#attr Pan_Range = 0

#@Group("CAMERA SETUP") @Order(4)
#@Description("[TEMP!] Tilt is zero to look horizontally. Positive is tilt up.")
#@Range(90,-90)
#attr Tilt_Start = 0

#@Group("CAMERA SETUP") @Order(5)
#@Description("[TEMP!] Positive tilt looks up.") 
#@Range(90,-90)
#attr Tilt_Range = 0



#########################
# VIEWSHED DISPLAY

@Group("DISPLAY OPTIONS",3) @Order(1)
@Color
attr Camera_Color = "#C0C0C0"

@Group("DISPLAY OPTIONS") @Order(2)
attr Camera_Scale = 2

@Group("DISPLAY OPTIONS") @Order(3)
@Color
attr Viewshed_Color = "#8080FF"

@Group("DISPLAY OPTIONS") @Order(4)
@Range(0,1)
attr Camera_Transparency = 0.35




@StartRule 
Shape -->
	alignScopeToAxes()
	s(1,1,1)
	i("builtin:cube")
	center(xz)
	comp(f) {back: NorthFace}

NorthFace --> 
	# Move down and south to center of original shape.  
	t(0,-0.5, -0.5)
	# Move up to height. This could be combined with previous t(), but I like clarity.
	t(0,Height,0)
	# Put camera object into place.
	InsertCamera
	#taper(10)
	CameraControl

CameraControl -->
	# Tilt and pan camera.
	r(-Tilt, -Pan, 0)
	center(xz)
	# Put Focus box in pl
	#InsertFocus
	# Move face to focus.
	t(0, 0, Zoom)
	# Scale to correct width, per zoom and angle of view.
	s(scalePerZoomAndViewAngle, getAspectScaleY * scalePerZoomAndViewAngle, 0)
	# Adjust position change from scale operation.
	center(xy)
	# Create pyramid shape representing viewshed.
	taper(-Zoom)
	CameraDisplay


InsertCamera -->
	extrude(-1)
	set(trim.vertical, false)
	i(assetDirectory + "Camera.obj")
	s('0.6,'1,'1)
	center(x)
	s(' Camera_Scale ,' Camera_Scale ,' Camera_Scale )
	center(xz)
	color(Camera_Color) 
	t(0,0,-0.2 * Camera_Scale )
	RetroMovieCamera.
	
const focalFrameScale = 0.2 

# No focus box on viewshed rule. If using for camera again, 
#  remember the scope was changed from XZ to XY in the rest of the code. 
# Below Code won't work, and the focus box should be spawned from the large rectangle, not the small. 
InsertFocus -->
	# FIX: Insert focus frame here rather than red box.
	color(1,0,0)
	# Extend to focus.
	t(0, -Zoom +0.1,0)
	# Scale to correct width, per zoom and angle of view.
	s(focalFrameScale * scalePerZoomAndViewAngle, 0, focalFrameScale * getAspectScaleY * scalePerZoomAndViewAngle)
	center(xz)
	X.


halfOfViewAngle = Horizontal_View_Angle / 2
scalePerZoomAndViewAngle = 2 * ( Zoom * tan(halfOfViewAngle))
	
# FIX: Find other common camera angles.
getAspectScaleY =
	case Aspect_Ratio == "4:3": 3/4
	case Aspect_Ratio == "16:9": 9/16
	else: 1

CameraDisplay -->
	# Color the viewshed.
	color(Viewshed_Color)
	# Set transparency.
	set(material.opacity, Camera_Transparency )
	X.
	
	
	
	
/*
 s(0,0,0)
 set(trim.vertical, false)
 i(assetDirectory + "CameraRetroMapZToY.obj")
 center(xyz)
 r(scopeCenter, 0,-90,0)
 t(0,'.3,0)	


*/	
	
	
	
	