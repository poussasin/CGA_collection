/**
 * File:    Building_Facades.cga
 * Created: 30 Apr 2013 02:42:18 GMT
 * Author:  Esri
 */

version "2014.0"

const materialDirectory = "assets/3D_City_Design_Assets/Material_Library/"

import Photovoltaic_Roof : "3D_City_Design_Rules/Support/Photovoltaic Roof.cga" #(Display_Textures = Display_Textures, Display_Thematics = Display_Thematics, Solid_Color = Solid_Color, Transparency = Transparency, Level_of_Detail = Level_of_Detail) 
import envReports : "3D_City_Design_Rules/Support/Environment Reporting.cga"

@Hidden
attr Display_Textures = true
@Hidden
attr Display_Thematics = "Thematics Off" 
@Hidden
attr Solid_Color = ""
@Hidden
attr Transparency = 1

@Hidden
attr DisableMassDisplay = false

texturingOn = Display_Textures 	# Shorthand.
thematicsOn = Display_Thematics != "Thematics Off"
coloringOn = !thematicsOn && texturingOn	# Shorthand.

peakRunoffDisplayOn = Display_Thematics == "Peak Runoff/Permeability"  


################################################################
## ATTRIBUTES
##




@Hidden 
attr Upper_Floor_Height = 0

@Hidden 
attr Ground_Floor_Height = 0

## Model Options	

@Group("MODEL OPTIONS",0) @Order(0) 
attr Generate_Facade = false

@Group("MODEL OPTIONS") @Order(1) @Range("High","Medium","Low")
attr Level_of_Detail = "Medium" 



@Group("MASS COLOR OPTIONS",1) @Order(2)
@Range("Solid","Random","Gradient-Up", "Gradient-Down") 
attr Mass_Display = "Gradient-Up"

@Group("MASS COLOR OPTIONS") @Order(3) 
attr Mass_Color_1 = "#57ABFF"

@Group("MASS COLOR OPTIONS") @Order(4) 
attr Mass_Color_2 = "#FFFFFF"



## Facade Design	

@Group("FACADE DESIGN",2) @Order(2) 
@Range("[WO]*W","o[WO]*Wo","O[Wo]*WO","wo[WO]*Wow","Wo[WO]*WoW","WO[Wo]*WOW","Rhythm1")
@Description("Name of floor pattern for uneven floors ('W' stands for Wall, 'O' for Opening, 'w' and 'o' for smaller versions thereof)") 
attr Main_Pattern_A = "[WO]*W"	

@Group("FACADE DESIGN") @Order(3) 
@Range("[WO]*W","o[WO]*Wo","O[Wo]*WO","wo[WO]*Wow","Wo[WO]*WoW","WO[Wo]*WOW","Rhythm1")
@Description("Name of floor pattern for uneven floors ('W' stands for Wall, 'O' for Opening, 'w' and 'o' for smaller versions thereof)") 
attr Main_Pattern_B = "[WO]*W"

@Group("FACADE DESIGN") @Order(4) 
@Range("Same as Main","WOW","WoW","wOWOw","woWow","woW","wOwoW","w[oW]*w")
@Description("Floor Pattern for sides ('W' stands for floating Wall, 'O' for Opening, 'w' and 'o' for smaller versions thereof)") 
attr Side_Pattern = "Same as Main"

@Group("FACADE DESIGN") @Order(5) 
@Range("None","On Front","On Rear")
attr Balconies = "None"

@Group("FACADE DESIGN") @Order(6) 
@Range("[WB]*W","b[WB]*Wb","Alternating")
attr Balcony_Pattern = "[WB]*W"

@Group("FACADE DESIGN") @Order(7) 
attr Ground_Floor_Shopfront = true

## Main Parameters

@Group("FACADE PARAMETERS",3) @Order(1) @Range(5,15)
attr Win_Width = 4

@Group("FACADE PARAMETERS") @Order(2) @Range(1,4)
attr Win_Height = Upper_Floor_Height - Cill_Height - Slab_Thickness 		# per default, the windows go up to the ceiling height

@Group("FACADE PARAMETERS") @Order(3) @Range(0,2)
attr Cill_Height = 0.3

@Group("FACADE PARAMETERS") @Order(4) @Range(0,5)
attr Wall_Width = 1.5

@Group("FACADE PARAMETERS") @Order(5) @Range(5,20)
attr Balcony_Width = 6

@Group("FACADE PARAMETERS") @Order(6) @Range(0,5)
attr Balcony_Depth = 2

@Group("FACADE PARAMETERS") @Order(7) @Range(0.7,1.1)
attr Railing_Height = 1


## Windows

@Group("WINDOWS",4) @Order(0) @Range("Wall Center","Inside Flush", "Outside Flush")
attr Win_Position = "Wall Center"

@Group("WINDOWS") @Order(1) @Range(0.7,2)
attr Panel_Width = 1

@Group("WINDOWS") @Order(2) @Range(0,0.3)
attr Frame_Width = 0.1

@Group("WINDOWS") @Order(3) @Range(0,0.3)
attr Frame_Depth = Frame_Width*2

@Group("WINDOWS") @Order(4)
attr Frame_Color = "#999999"

@Group("WINDOWS") @Order(5) @Range("iRay Glass", "CE Blue","CE Dark Blue","CE Green","CE Brown","CE Black")
attr Glass_Material = "iRay Glass"

## Walls

@Group("WALLS",5) @Order(1) 
@Range ("Stucco Redlands Red", "Stucco Redlands Brown", "Stucco Redlands White", "Brick Brown No Mortar Rough Running Bond", "Brick Brown No Mortar Running Bond", "Brick Brown Running Bond", "Brick Grey Running Bond", "Brick Red High Contrast Running Bond", "Brick Red No Mortar Running Bond", "Brick Red Running Bond", "Brick Varied Brown Running Bond", "Brick White Dirty Running Bond", "Brick White Painted Running Bond", "Cement Block Dark Grey Running Bond", "Cement Block Grey Running Bond", "Cement Block Grey Specks Running Bond", "Cement Block Light Running Bond")
attr Wall_Texture = "Stucco Redlands White"

@Group("WALLS") @Order(1)
@Description("Adjustment allows scaling of wall texture.") 
@Range(0.2, 5)
attr Wall_Texture_Scaler = 1

@Group("WALLS") @Order(2) 
attr Wall_Color ="#ffffff"

@Group("WALLS") @Order(3) @Range(0.2,0.7)
attr Wall_Thickness = 0.4

@Group("WALLS") @Order(4) @Range(0.2,1)
attr Slab_Thickness = 0.7

@Group("WALLS") @Order(5) @Range(0,1)
attr Parapet_Height = 0.4

## Balconies




const Show_Awnings_Ground = Awning_Type_Ground != "None" 
const Show_Awnings_Upper = Awning_Type_Upper != "None" 

@Group("AWNINGS", 7) @Order(1)
@Range("None","Shed","Box","Esri-Q")
attr Awning_Type_Ground = "Shed"

@Group("AWNINGS") @Order(2)
@Range(0.2, 3)
attr Awning_Extension_Ground = 1

@Group("AWNINGS") @Order(3)
attr Awning_Height_Ground = 1


@Group("AWNINGS") @Order(4)
@Range("None","Shed","Box","Esri-Q")
attr Awning_Type_Upper = "Esri-Q"

@Group("AWNINGS") @Order(5)
@Range(0.2, 3)
attr Awning_Extension_Upper = 1.35

@Group("AWNINGS") @Order(6)
attr Awning_Height_Upper = 1

@Group("AWNINGS") @Order(7)
attr Awning_Color = "#FFFFFF"
 

@Group("ROOFS",8) @Order(1)
@Range("Flat", "Gable", "HipFlat") 
attr Roof_Type = "Gable" 


@Group("ROOFS") @Order(3)
@Range ("Green Roof", "Gravel", "Flat Metal 1", "Flat Metal 2", "Flat Metal 3", "Flat Metal 4", "Flat Metal 5", "Flat Metal 6", "Flat Metal 7", "Flat Metal 8", "Flat Metal 9", "Flat Metal 10","Flat Metal 11", "Flat Metal 12", "Flat Metal 13", "Flat Metal 14", "Flat Metal 15","Flat Metal 16", "Flat Metal 17", "Flat Metal 18", "Flat Metal 19", "Flat Metal 20", "Flat Standard 1", "Flat Standard 2", "Flat Standard 3", "Flat Standard 4", "Flat Standard 5", "Flat Standard 6", "Flat Standard 7", "Flat Standard 8", "Flat Standard 9", "Flat Standard 10")
attr Flat_Roof_Texture = "Flat Metal 1" 

@Group("ROOFS") @Order(4)
@Range ("Shingle Black", "GAF Elk WeatherMax Charcoal", "Barrel Tile Brown", "Barrel Tile Red Mixed", "Camelot Shingle", "Mesa Shingle Brown", "Standard Dura Shingle", "Standard Shingle", "Terracotta Tile Dark Brown", "Terracotta Tile Red", "Weathered Shingle") @Order(2)
attr Sloped_Roof_Texture = "Shingle Black"	

@Group("ROOFS") @Order(5)
@Range(0.1,5.0)
attr Roof_Texture_Scale = 2	

@Group("ROOFS")
attr Sloped_Roof_Angle = 15
@Group("ROOFS") @Range(0,1)
attr Roof_Overhang = .1 

@Group("ROOFS")
attr Hip_Roof_Height = 1.5



@Group("ARCGIS/3D ANALYST",9) @Order(1) @Range("None","On Sides", "All") @Description("Turn on to split the whole model into rectangular panels (usable e.g. for analysis)")
attr Panels_Generate = "None"

@Group("ARCGIS/3D ANALYST") @Order(2) @Range(1,20) @Description("Note that panel size is adjusted/rounded to the geometry's dimensions on the side")
attr Panel_Size = 5

@Group("ARCGIS/3D ANALYST") @Order(3) @Range(0,3) @Description("Distance of the sampling point in front of the panel's center.")
attr Panel_Sampling_Point_Distance = 0.1




## Hidden Attributes used for Reporting ########################

@Hidden
attr floorIdx = -1
@Hidden
attr nFloors = -1
@Hidden
attr tileIdx = -1
@Hidden
attr nTiles = -1



################################################################
## CONSTANTS
##

const frameDepth = case highLOD: Frame_Depth else: 0
const winSetback = 
	case lowLOD							: 0
	case Win_Position == "Outside Flush": 0
	case Win_Position == "Inside Flush"	: Wall_Thickness-frameDepth-0.02
	else 								: Wall_Thickness/2-frameDepth/2		# Wall Center

# just for short notations
const walW = Wall_Width
const winW = Win_Width
const panW = Panel_Width
const balW = Balcony_Width
const lowLOD 	= Level_of_Detail == "Low" 
const midLOD 	= Level_of_Detail == "Medium"
const highLOD 	= Level_of_Detail == "High"

################################################################
## FUNCTIONS
##






# pattern switching
isConstant = Main_Pattern_A=="o[WO]*Wo" || Main_Pattern_B=="o[WO]*Wo" || Main_Pattern_A=="O[Wo]*WO" || Main_Pattern_B=="O[Wo]*WO" # patterns which need to go all around
mainPattern = 
	case front || rear || isConstant : 
		case even(floorIdx): Main_Pattern_A 
		else: Main_Pattern_B  # in case of an even floor, we take pattern A, otherwise pattern B
	else : 
		case even(floorIdx): Main_Pattern_B 
		else: Main_Pattern_A  # on the left and right we alternate the two patterns different
		
balconyPattern = 
	case Balcony_Pattern=="Alternating": case even(floorIdx): "[WB]*W" else: "b[WB]*Wb"
	else                               : Balcony_Pattern	
	
# utils
even(val) 	= val % 2 == 0
uneven(val) = val % 2 == 1
rear  = geometry.isOriented(object.back)
left  = geometry.isOriented(object.left)
right = geometry.isOriented(object.right)
front = geometry.isOriented(object.front)

# for adjacency checks & handling.
adjacentToBalconiesOnRight = left&&Balconies=="On Front"  || right && Balconies=="On Rear" 
	|| left && Ground_Floor_Shopfront && floorIdx == 0
adjacentToBalconiesOnLeft  = right && Balconies=="On Front" || left && Balconies=="On Rear"
	|| right && Ground_Floor_Shopfront && floorIdx == 0
windowsOnCorners = case mainPattern == "o[WO]*Wo" || mainPattern == "O[Wo]*WO": 1 else: 0
balconyOnCorners = case balconyPattern == "b[WB]*Wb": 1 else: 0

# for balcony tile
glassBalconyLeft  = case tileIdx == 0       : 0 else: (1+floorIdx%2)*panW
glassBalconyRight = case tileIdx == nTiles-1: 0 else: (1+floorIdx%2)*panW

# for panels
getWorldDir = 
	case geometry.isOriented(world.north)	: "north"
	case geometry.isOriented(world.south)	: "south"
	case geometry.isOriented(world.west)	: "west"
	case geometry.isOriented(world.east)	: "east"
	case geometry.isOriented(world.up)		: "up"
	else									: "down"
getLocalDir = 
	case geometry.isOriented(object.front)	: "front"
	case geometry.isOriented(object.back)	: "rear"
	case geometry.isOriented(object.left)	: "left"
	case geometry.isOriented(object.right)	: "right"
	case geometry.isOriented(object.top)	: "top"
	else									: "bottom"	



################################################################
## RULES
##
			
# Startshape is a floor volume here ################################
FloorMass(idx,n) -->
	case !Generate_Facade:
		case coloringOn && !DisableMassDisplay:
			case Mass_Display == "Random" :
				ColorRamp(putWithinRange(thisBuildingWater + thisFloorsVariation))	
			case Mass_Display == "Gradient-Up" :
				ColorRamp(idx / n)
			case Mass_Display == "Gradient-Down" :
				ColorRamp(1- (idx / n))
			else:
				color(Mass_Color_1) X.
		else:
			X.
	else:
		set(floorIdx,idx) set(nFloors,n)
		#Debug
		comp(f){ side: FloorSide }
		Slab
		Roof
		
Debug -->
	print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
	print("Display_Textures = " + Display_Textures)  
	print("Display_Thematics = " + Display_Thematics)
	print("Solid_Color = " + Solid_Color)
	print("Transparency = " + Transparency)
	print("Upper_Floor_Height = " + Upper_Floor_Height)
	print("Ground_Floor_Height = " + Ground_Floor_Height)
	print("DisableMassDisplay = " + DisableMassDisplay)
	NIL
	
Roof -->
	# First check if this is the last floor.
	case floorIdx == nFloors - 1:
		case Roof_Type != "Flat":
			comp(f) {world.up : RoofNonFlat}
		case Roof_Type == "Flat" && Photovoltaic_Roof.Solar_Panels_On:
			comp(f) {world.up : Photovoltaic_Roof.PVElements }
			# Note: Currently roof must be flat for Solar Panels.
			# FIX: Add solar panels to other roof types, next version. 
		else: NIL
	else: NIL
     

RoofNonFlat -->
	case Roof_Type == "HipFlat" && floorIdx == nFloors - 1 :
		roofHip(Sloped_Roof_Angle, Roof_Overhang, true)
		split(y) {Hip_Roof_Height :
			comp(f) {world.up : HipFlatRoof   
			| world.down : NIL 
			| aslant: HipFlatRoof}
		| ~1 : NIL}
	case Roof_Type == "Gable" && floorIdx == nFloors - 1 :
		roofGable(Sloped_Roof_Angle, Roof_Overhang, Roof_Overhang, true)
		comp(f) {aslant: RoofTextureSloped | vertical: WallSide	}
	else : NIL





HipFlatRoof -->
	case geometry.angle(maxSlope) > 10 && geometry.angle(maxSlope) < 88:
		RoofTextureSloped
	else:
		offset(-0.2) 
		comp(f) {
			border : X.
			| inside :
				extrude(-0.5)
				comp(f) {world.up : NIL
				| side: AddDirtMap
				| world.down: RoofTexture
			}
		}
	
RoofTextureSloped -->
	case texturingOn:
		alignScopeToGeometry(yUp, any, world.lowest)
		setupProjection(0,scope.xz, ~roofTextureSize/Roof_Texture_Scale, ~roofTextureSize/Roof_Texture_Scale)
		projectUV(0)
		texture(materialDirectory + "SlopedRoof/" + Sloped_Roof_Texture + ".jpg")
		RoofTextureRainfall	
	else: 
		RoofTextureRainfall

RoofTextureRainfall -->
	envReports.ReportPeakDischarge(envReports.materialPavementAndRooftops)
	RoofTextureRainfallStep2
	
RoofTextureRainfallStep2 -->
	case peakRunoffDisplayOn:
		color(envReports.colorByPerviousMaterial(envReports.materialPavementAndRooftops))
	else: X. 
	



const roofTextureSize = rand(4,12)

# FIX, this was for demonstration of story-based thematic display.
# As it was a quick solution for demo, it was hooked to random data.
# Code is left here since it is part of "random" color code in mass coloring.
# Clean this up later.

# Temp water consumption coloration.
const thisBuildingWater = rand(0.1, 0.9)
thisFloorsVariation = rand(-0.3,0.3)
putWithinRange(number) =
	case number < 0 : 0
	case number > 1 : 1
	else : number







## Floor ################################

getWallBottom 		= case floorIdx > 0: Cill_Height else: 0
getWinHeight		= case floorIdx > 0: Win_Height  else: Win_Height + Cill_Height + Ground_Floor_Height - Upper_Floor_Height
adjustWallHeight 	= 
	case Roof_Type == "Flat":
		case floorIdx==nFloors-1: scope.sy+Parapet_Height else: scope.sy
	else: scope.sy

#print(
#Win_Height + Cill_Height + Ground_Floor_Height - Upper_Floor_Height

FloorSide -->
	setupProjection(0, scope.xy, ~4, ~4, 1)
	# Adjust wall height to add parapet height to wall height of top floor.
	s('1,adjustWallHeight,'1)
	# Split wall into WallBottom, FloorPattern, and TopWall
	/*  
	print("============================")
	print("Upper_Floor_Height = " + Upper_Floor_Height)
	print("Ground_Floor_Height = " + Ground_Floor_Height)
	print("----------------------------")
		
	print("Win_Height = " + Win_Height)
	print("Cill_Height = " + Cill_Height)
	print("Ground_Floor_Height = " + Ground_Floor_Height)
	print("Upper_Floor_Height = " + Upper_Floor_Height)
	print("floorIdx = " + floorIdx)
	print("nFloors = " + nFloors)
	print("getWallBottom = " + getWallBottom)
	print("getWinHeight = " + getWinHeight)
	*/
	split(y){ getWallBottom: Wall | getWinHeight: FloorPattern | ~1: Wall }

FloorPattern --> 
	case front && Ground_Floor_Shopfront && floorIdx == 0:
		BalconyPattern 		 
	case front && Balconies=="On Front" || rear && Balconies=="On Rear":
		BalconyPattern 		 
	case Side_Pattern != "Same as Main":
		case left || right: SidePattern else: MainPattern
	else: 
		MainPattern

## Main Pattern --------------------

MainPattern --> 
	case adjacentToBalconiesOnRight:
		split(x){ ~1: MainPatternDispatcher | windowsOnCorners*walW: Wall | balconyOnCorners*(balW+walW)/2: Balcony }
	case adjacentToBalconiesOnLeft:
		split(x){ balconyOnCorners*(balW+walW)/2: Balcony | windowsOnCorners*walW: Wall | ~1: MainPatternDispatcher }
	else:
		MainPatternDispatcher
		
MainPatternDispatcher -->
	case mainPattern == "[WO]*W": 
		split(x){ { ~walW: Wall | winW: Tile }* | ~walW: Wall }
	case mainPattern == "o[WO]*Wo":
		split(x){ winW/2+walW/2: Tile | { ~walW: Wall | winW: Tile }* | ~walW: Wall | winW/2+walW/2: Tile }
	case mainPattern == "O[Wo]*WO": #hmm
		split(x){ winW+walW/2: Tile | { ~walW: Wall | panW: Tile }* | ~walW: Wall | winW+walW/2: Tile }
	case mainPattern == "wo[WO]*Wow":
		split(x){ ~walW/2: Wall | panW: Tile | { ~walW: Wall | winW: Tile }* | ~walW: Wall | panW: Tile | ~walW/2: Wall }
	case mainPattern == "Wo[WO]*WoW":
		split(x){ ~walW: Wall | panW: Tile | { ~walW: Wall | winW: Tile }* | ~walW: Wall | panW: Tile | ~walW: Wall }
	case mainPattern == "WO[Wo]*WOW":
		split(x){ ~walW: Wall | winW-walW/2: Tile | { ~walW: Wall | panW: Tile }* | ~walW: Wall | winW-walW/2: Tile | ~walW: Wall }
	case mainPattern == "Rhythm1":
		split(x){ ~walW/2: Wall | { winW+walW: Tile }* | ~walW/2: Wall }
	else:
		Wall

## Side Pattern --------------------

SidePattern -->
	case adjacentToBalconiesOnRight:
		case scope.sx < winW+walW:
			case balconyPattern == "b[WB]*Wb": Balcony else: Wall
		else:
			split(x){ windowsOnCorners*(winW+walW)/2: Tile | ~1: SidePatternDispatcher | balconyOnCorners*(balW+walW)/2: Balcony }
	case adjacentToBalconiesOnLeft:
		case scope.sx < winW+walW:
			case balconyPattern == "b[WB]*Wb": Balcony else: Wall
		else:
			split(x){ balconyOnCorners*(balW+walW)/2: Balcony | ~1: SidePatternDispatcher | windowsOnCorners*(winW+walW)/2: Tile }
	else:
		split(x){ windowsOnCorners*(winW+walW)/2: Tile | ~1: SidePatternDispatcher | windowsOnCorners*(winW+walW)/2: Tile }


SidePatternDispatcher -->
	case Side_Pattern == "WOW":
		split(x){ ~1: Wall | winW: Win | ~1: Wall }
	case Side_Pattern == "WoW":
		split(x){ ~1: Wall | panW: Win | ~1: Wall }
	case Side_Pattern == "wOWOw":
		split(x){ walW: Wall | winW: Win | ~1: Wall | winW: Win | walW: Wall }
	case Side_Pattern == "woWow":
		split(x){ walW: Wall | panW: Win | ~1: Wall | panW: Win | walW: Wall }
	case Side_Pattern == "woW":
		case right: split(x){ walW: Wall | panW: Win | ~1: Wall }
		else      : split(x){ ~1: Wall | panW: Win | walW: Wall }
	case Side_Pattern == "wOwoW":
		case right: split(x){ walW: Wall | winW: Win | walW: Wall | panW: Win | ~1: Wall }
		else      : split(x){ ~1: Wall | panW: Win | walW: Wall | winW: Win | walW: Wall }
	case Side_Pattern == "w[oW]*w":
		case right&&even(floorIdx) || left&&uneven(floorIdx): split(x){ walW: Wall | { panW: Win | ~walW*4: Wall }* }
		else                                                : split(x){ { ~walW*4: Wall | panW: Win }* | walW: Wall }
	else:
		Wall
		
## Balcony Pattern --------------------

BalconyPattern -->
	case balconyPattern == "[WB]*W":
		case scope.sx < winW+walW:
			Wall 
		else:
			split(x){ { walW: Wall | ~balW: Balcony }* | walW: Wall }
	case balconyPattern == "b[WB]*Wb":
		case scope.sx < winW+walW:
			Balcony 
		else:
			split(x){ ~(balW+walW)/2: Balcony | { walW: Wall | ~balW: Balcony }* | walW: Wall | ~(balW+walW)/2: Balcony }
	else:
		Balcony


## Tile ################################

Tile -->
	set(tileIdx,split.index) set(nTiles,split.total)
	TileDispatcher
	
TileDispatcher -->
	case mainPattern == "Rhythm1":
		case even(floorIdx+tileIdx)	: split(x){ walW/2: Wall | ~winW/2: Win }* 
		else						: split(x){ ~winW/2: Win | walW/2: Wall }*
	else:
		Win
	//Rail 


## Balcony ################################


Balcony -->
	case scope.sx < winW+walW: Balcony(0,0) else:
		set(tileIdx,split.index) set(nTiles,split.total)
		Balcony(glassBalconyLeft,glassBalconyRight)

Balcony(winWidthLeft,winWidthRight) -->
	case lowLOD:
		split(x){ winWidthLeft : Win(0) 
				| ~1 : Rail s(scope.sx-winSetback,'1,-Balcony_Depth+Wall_Thickness) t(winSetback/2,0,0) i("builtin:cube") comp(f){ front: NIL | side: Win(0) }
				| winWidthRight: Win(0) }
	else:
		Rail 
		Awning
		t(0,0,-winSetback)
		split(x){ winWidthLeft : WinOmitAwning 
				| ~1 : s(scope.sx-winSetback,'1,-Balcony_Depth+Wall_Thickness) t(winSetback/2,0,0) i("builtin:cube") comp(f){ front: NIL | side: WinOmitAwning }
				| winWidthRight: WinOmitAwning }

WinOmitAwning -->
	set(awningAlreadyDone, true)
	Win(0)

## Windows ################################

@Hidden
attr awningAlreadyDone = false
	
Win -->
	case lowLOD:
		Win(0)
	else:	
		Win(winSetback)	
	
Win(dz) -->
	case lowLOD || Frame_Width <= 0: 
		t(0,0,-dz) trim 
		Glass
	else:
		# Send window shape to Awning, before framing and glass.
		Awning
		t(0,0,-dz) trim
		split(y){ Frame_Width : Frame 
				| ~1: split(x){ Frame_Width: Frame | { ~panW: t(0,0,-frameDepth/2) Glass | Frame_Width: Frame }* }
				| Frame_Width : Frame }


#############################################
# Redlands, Awnings

Awning -->
	case awningAlreadyDone : NIL
	else:
		case Show_Awnings_Ground && floorIdx == 0 && front :
			AwningDispatchGround 
		case Show_Awnings_Upper && floorIdx > 0 : 
			AwningDispatchUpper
		else : NIL


awningExtension = 
	case floorIdx == 0 : Awning_Extension_Ground 
	else : Awning_Extension_Upper

awningHeight = 
	case floorIdx == 0 : Awning_Height_Ground 
	else : Awning_Height_Upper

AwningDispatchGround -->
	case Awning_Type_Ground == "Canvas" : AwningCanvas
	case Awning_Type_Ground == "Box" : AwningBox
	case Awning_Type_Ground == "Esri-Q" : AwningEsriQ
	else : AwningCanvas # Default.

AwningDispatchUpper -->
	case Awning_Type_Upper == "Canvas" : AwningCanvas
	case Awning_Type_Upper == "Box" : AwningBox
	case Awning_Type_Upper == "Esri-Q" : AwningEsriQ
	else : AwningCanvas # Default.


const canvasEdgeHeight = 0.2
AwningCanvas -->
	extrude(awningExtension)
	comp(f) {world.up :
	roofShed(45, 2)
	s('1,awningHeight, '1)
	translate(rel, world, 0, -scope.sy, 0)
	comp(f) {world.down : AwningCanvasEdge | front: NIL | all: AwningCanvasTexture}
	}

AwningCanvasEdge -->
	extrude(canvasEdgeHeight) 
	comp(f) {horizontal: NIL | front: NIL | all: AwningCanvasTexture}


AwningCanvasTexture -->
		color(case coloringOn: Awning_Color else: "") 
		AddDirtMap

AwningBox -->
	case coloringOn: 
		color(Awning_Color)
		AwningBoxStep2
	else:
		AwningBoxStep2
		
AwningBoxStep2 -->
	split(y) {~1 : NIL | awningHeight : 
		extrude(awningExtension)
		comp(f) {world.up: 
				offset(-0.05) comp(f) {border: 
				AwningBoxEdge.
				| inside:
				translate(rel, world, 0, -awningHeight/2, 0)
				AddDirtMap }
				| world.down: NIL
				| all:
				AwningBoxTexture
		}
	}
	
AwningBoxTexture -->
	case texturingOn: 
		AddDirtMap
	else:
		AddDirtMap


bothFramesHeight = 0.5588
shadeFrameHeight = 0.1524
shadeFrameExtension = 1.524
shadeFrameThickness = 0.02
shadeBladeThickness = 0.02 
shadeBladeCount = 5

AwningEsriQ -->
	split(y) {~1 : NIL | shadeFrameHeight : ShadeFrameLower | bothFramesHeight - (2*shadeFrameHeight) : NIL
		|  shadeFrameHeight : ShadeFrameUpper }

ShadeFrameLower -->
	extrude(awningExtension)
	comp(f) {left: 	ShadeFrameThickness | right: ShadeFrameThickness | top: ShadeBlades(1,shadeBladeCount) }
	
ShadeBlades(index, n) -->
	case index <= n :
		ShadeBlade(index)
		ShadeBlades(index + 1, n)
	else: NIL
		
ShadeBlade(index) -->
	t(0,0, -((shadeFrameHeight/2) + (shadeFrameHeight * index)))
	r(scopeCenter,-45,0,0)
	ShadeBladeLOD

ShadeBladeLOD -->
	case highLOD :
		extrude(shadeBladeThickness)	
		ShadeFrameTexture
	else :
		ShadeFrameTexture
		
ShadeFrameUpper -->
	extrude(awningExtension - (bothFramesHeight - shadeFrameHeight))
	comp(f) {left: 	ShadeFrameThickness | right: ShadeFrameThickness | top: ShadeBlades(1,shadeBladeCount) }

ShadeFrameThickness -->
	case highLOD :
		extrude(shadeFrameThickness)
		ShadeFrameTexture
	else :
		ShadeFrameTexture

ShadeFrameTexture -->
	case coloringOn:
		color(0.15,0.15,0.15)
	else: X.




###########################################################
# Original Code

Frame --> 
	case frameDepth > 0:
		extrude(-frameDepth) trim
		FrameStep2
	else:
		FrameStep2

FrameStep2 -->
	case coloringOn:
		color(Frame_Color)
	else:
		X.

		
		
Glass -->
	case coloringOn:
		case Glass_Material == "CE Blue":
			color(0.7,0.75,1)
			set(material.ambient.r,0) set(material.ambient.g,0) set(material.ambient.b,1)
			set(material.specular.r,0.8) set(material.specular.g,0.8) set(material.specular.b,0.8)
			set(material.reflectivity,0.8) set(material.shininess,50) set(material.opacity,0.6)	GlassPanels
		case Glass_Material == "CE Dark Blue":
			color(0.2,0.2,0.25)
			set(material.ambient.r,0) set(material.ambient.g,0) set(material.ambient.b,0.1)
			set(material.specular.r,0.8) set(material.specular.g,0.8) set(material.specular.b,0.8)
			set(material.reflectivity,0.6) set(material.shininess,50) set(material.opacity,0.8)	GlassPanels
		case Glass_Material == "CE Green":
			color(0.4,0.5,0.4)
			set(material.ambient.r,0) set(material.ambient.g,0.2) set(material.ambient.b,0.05)
			set(material.specular.r,0.8) set(material.specular.g,0.8) set(material.specular.b,0.8)
			set(material.reflectivity,0.8) set(material.shininess,50) set(material.opacity,0.6)	GlassPanels
		case Glass_Material == "CE Brown":
			color(0.3,0.25,0.2)
			set(material.ambient.r,0.2) set(material.ambient.g,0.1) set(material.ambient.b,0)
			set(material.specular.r,0.8) set(material.specular.g,0.8) set(material.specular.b,0.8)
			set(material.reflectivity,0.8) set(material.shininess,50) set(material.opacity,0.6)	GlassPanels
		case Glass_Material == "CE Black":
			color(0.1,0.1,0.1)
			set(material.specular.r,0.8) set(material.specular.g,0.8) set(material.specular.b,0.8)
			set(material.reflectivity,0.7) set(material.shininess,50) set(material.opacity,0.8)	GlassPanels
		case Glass_Material == "iRay Glass":
			color(0.35,0.37,0.5)
	 		set(material.specular.r,0.8) set(material.specular.g,0.8) set(material.specular.b,0.8)
	  		set(material.reflectivity,0.8) set(material.shininess,128) set(material.opacity,0.8) GlassPanels
		else:
			color(1,1,1)
			set(material.opacity,0.8) GlassPanels
	else: X.

GlassPanels -->
	case Panels_Generate == "None":
		Glass.
	else:
		Panels("Glass")
		

## Wall ################################

Wall -->
	case lowLOD: 
		WallSide
	else:
		Wall(Wall_Thickness)

Wall(thickness) -->
	s('1,'1,thickness) t(0,0,'-1) 
	i("builtin:cube") 
	comp(f){ side = WallSide | all = WallSideProj}

WallSideProj -->
	setupProjection(0, scope.xy, defaultWallTexSize * Wall_Texture_Scaler, defaultWallTexSize * Wall_Texture_Scaler)
	WallSide

WallSide -->
	case texturingOn:
		setupProjection(0, scope.xy, defaultWallTexSize * Wall_Texture_Scaler, defaultWallTexSize * Wall_Texture_Scaler)
		projectUV(0) 
		texture(materialDirectory + "WallTextures/" + Wall_Texture + ".jpg")
		WallSidePart2
	else: WallSidePart2
	
defaultWallTexSize = 4


WallSidePart2 -->
	case coloringOn:
		color(Wall_Color)  
		WallPanels
	else:
		WallPanels


WallPanels -->
	case Panels_Generate == "None":
		Wall.
	else:
		Panels("Wall")


## Railing ################################
		
Rail --> 
	case floorIdx == 0 || scope.sx < panW*1.5:
		NIL
	else:
		t(0,0,-winSetback*0.5) split(y){ Railing_Height: trim RailLoop(20) } NIL	
		
RailLoop(n) -->
	case n > 0: RailLoop(n-1) else: Glass # just a gimmick for CE: draw the railing at last (so that the alpha looks good)


## Slab ################################



Slab -->
	case lowLOD:
		comp(f){ top: 
		RoofTexture #FIX. This is wrong. Was a temp fix.
		}
	else:
		split(y){ 0.05: NIL | ~1: comp(f){ bottom: Flooring | top: Ceiling } | Slab_Thickness: NIL }	


RoofTexture -->
	case texturingOn:
		setupProjection(0, scope.xy, scope.sx, scope.sy) projectUV(0)
		texture(materialDirectory + "FlatRoof/" + Flat_Roof_Texture + ".jpg")	
		RoofTextureStep2
	else:
		RoofTextureStep2


RoofTextureStep2 -->
	# FIX: I'm using the highest permeability surface here for Green Roof, until we have collection systems.
	case flatRoofIsPermeable:
		envReports.ReportPeakDischarge(envReports.materialUnderTrees)
		RoofTextureStep3
	else: 
		envReports.ReportPeakDischarge(envReports.materialPavementAndRooftops)
		RoofTextureStep3

# FIX: This should also take into account possibilities for higher rainwater absorbtions for collection systems.
const flatRoofIsPermeable = Flat_Roof_Texture == "Green Roof"


RoofTextureStep3 -->
	case peakRunoffDisplayOn:
		# FIX: I'm using the highest permeability surface here for Green Roof, until we have collection systems.
		case flatRoofIsPermeable:
			color(envReports.colorByPerviousMaterial(envReports.materialUnderTrees)) X.
		else:
			color(envReports.colorByPerviousMaterial(envReports.materialPavementAndRooftops)) X.
	else: X. 
		 



Ceiling -->
	offset(-Wall_Thickness,inside) extrude(Slab_Thickness-0.05)
	comp(f){ top:
	RoofTexture
	| all = Ceiling. }

Flooring -->
	offset(-Wall_Thickness,inside) extrude(0.05)
	comp(f){ top: WallSideProj | all = FlooringTexture }

FlooringTexture -->
	case coloringOn:
		color("#333339")
	else: NIL


RoofPanels --> 
	case Panels_Generate != "All":
		Roof.
	else:
		Panels("Roof")


## Panels ################################

Panels(type) -->	
	split(x,noAdjust){ ~Panel_Size: split(y){ ~Panel_Size: Panel(type) }* }*			# THE split

Panel(type) -->
	case geometry.area() < 0.02:
		NIL
	else:
		alignScopeToGeometry(zUp,0,world.lowest)
		texture("")
		#report("ID",uid) 																		# switching off texture
		#report("Type",type) report("Area",geometry.area)
		#report("Local Orientation",getLocalDir) report("World Orientation",getWorldDir) 
		Panel.
		#[ s(0,0,0) center(xyz) t(0,0,Panel_Sampling_Point_Distance) 
		# comp(v){ 0: report("Z",scope.elevation) SamplingPoint. } ]


##########################################

dirtmapTexture = fileRandom(materialDirectory + "DirtMap/Dirt*.jpg")

AddDirtMap -->
	case texturingOn:
		alignScopeToGeometry(yUp, any, world.lowest)
		setupProjection(2,scope.xz,'1,'1)
		projectUV(2)
		rotateScope(2,rand(360),0)
		set(material.dirtmap, dirtmapTexture)
	else: X.

##########################################
# Modification of ColorRamp.CGA:

Color1 = Mass_Color_1
Color2 = Mass_Color_2

convertHexToR(hex) = convertHexToDecimal(substring(hex,1,3)) / 255 
convertHexToG(hex) = convertHexToDecimal(substring(hex,3,5)) / 255
convertHexToB(hex) = convertHexToDecimal(substring(hex,5,7)) / 255
convertHexToDecimal(hex) = (digitValue(substring(hex,0,1)) * 16) +  digitValue(substring(hex,1,2))
digitValue(hex) = 
	case hex == "0" : 0	
	case hex == "1" : 1
	case hex == "2" : 2
	case hex == "3" : 3
	case hex == "4" : 4
	case hex == "5" : 5
	case hex == "6" : 6
	case hex == "7" : 7
	case hex == "8" : 8
	case hex == "9" : 9
	case hex == "A" : 10
	case hex == "B" : 11
	case hex == "C" : 12
	case hex == "D" : 13
	case hex == "E" : 14
	else : 15 # "F"


R1 = convertHexToR(Color1)
G1 = convertHexToG(Color1) 
B1 = convertHexToB(Color1)
R2 = convertHexToR(Color2)
G2 = convertHexToG(Color2)
B2 = convertHexToB(Color2)

cR(Ramp_Control) = R1 + ((R2 - R1) * Ramp_Control)
cG(Ramp_Control) = G1 + ((G2 - G1) * Ramp_Control)
cB(Ramp_Control) = B1 + ((B2 - B1) * Ramp_Control)

ColorRamp(c) --> color(cR(c),cG(c),cB(c))


DisableCGAWarnings -->
	# This is rule exists only to stop the CGA warnings from showing; it has no use, otherwise.
	# The below lines are just calling all of the "unused rules" so they do not flag as unused.
	FloorMass(0,1)	


################################################################
## STYLES
##
































































style Redlands_Mixed_Use_1
attr Generate_Facade = true
attr Win_Width = 3.0
attr Wall_Width = 0.67
attr Panel_Width = 1.2
attr Wall_Texture = "Stucco Redlands Red"
attr Wall_Thickness = 0.7
attr Awning_Type_Upper = "None"
attr Awning_Color = "#408080"


style Redlands_Mixed_Use_Green_Building_1
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_A = "[WO]*W"
attr Main_Pattern_B = "Rhythm1"
attr Win_Width = 3.0
attr Win_Position = "Wall Center"
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Brown No Mortar Running Bond"
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Color = "#FF8080"
attr Roof_Type = "Flat"
attr Sloped_Roof_Texture = "Shingle Black"
attr Flat_Roof_Texture = "Green Roof"
attr Roof_Texture_Scale = 0.1



style Redlands_Mixed_Use_2
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_A = "[WO]*W"
attr Main_Pattern_B = "[WO]*W"
attr Side_Pattern = "Same as Main"
attr Balconies = "On Rear"
attr Balcony_Pattern = "[WB]*W"
attr Win_Width = 5.0
attr Wall_Width = 1.0
attr Panel_Width = 1.5
attr Frame_Width = 0.17
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Red Running Bond"
attr Wall_Color = "#C0C0C0"
attr Awning_Type_Ground = "Shed"
attr Awning_Color = "#8080C0"
attr Roof_Type = "Gable"
attr Sloped_Roof_Texture = "Shingle Black"
attr Flat_Roof_Texture = "Green Roof"
attr Roof_Texture_Scale = 2.07
attr Hip_Roof_Height = 1.86
attr Roof_Overhang = 0.01
attr Sloped_Roof_Angle = 13.43



style Redlands_Mixed_Use_3
attr Generate_Facade = true
attr Win_Width = 3.0
attr Wall_Width = 0.67
attr Panel_Width = 1.2
attr Wall_Texture = "Brick Red No Mortar Running Bond"
attr Wall_Texture_Scaler = 0.5
attr Wall_Thickness = 0.7
attr Awning_Type_Upper = "None"
attr Awning_Color = "#0080C0"
attr Sloped_Roof_Texture = "Standard Shingle"
attr Flat_Roof_Texture = "Flat Metal 1"
attr Roof_Texture_Scale = 4.0
attr Sloped_Roof_Angle = 20.0



style Redlands_Mixed_Use_Eco_2
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Balconies = "On Rear"
attr Wall_Texture = "Brick Varied Brown Running Bond"
attr Awning_Color = "#FFFFC8"
attr Sloped_Roof_Texture = "GAF Elk WeatherMax Charcoal"
attr Roof_Overhang = 0.5




style Redlands_Residential_1
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Balconies = "On Front"
attr Ground_Floor_Shopfront = true
attr Win_Width = 3.0
attr Wall_Width = 1.3
attr Balcony_Width = 5.0
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Brown No Mortar Running Bond"
attr Wall_Color = "#C1C1C1"
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Color = "#C0C0C0"
attr Sloped_Roof_Texture = "Standard Shingle"
attr Flat_Roof_Texture = "Green Roof"



style Redlands_Residential_2
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_B = "[WO]*W"
attr Balconies = "None"
attr Win_Width = 3.0
attr Wall_Width = 1.0
attr Win_Position = "Inside Flush"
attr Panel_Width = 1.5
attr Frame_Width = 0.17
attr Frame_Color = "#C0C0C0"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Brown No Mortar Rough Running Bond"
attr Wall_Color = "#C0C0C0"
attr Awning_Type_Ground = "Shed"
attr Awning_Color = "#408080"
attr Roof_Type = "Gable"
attr Sloped_Roof_Texture = "Shingle Black"
attr Roof_Texture_Scale = 2.07
attr Roof_Overhang = 0.01
attr Sloped_Roof_Angle = 17.16



style Redlands_Office_Eco_1
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_A = "[WO]*W"
attr Balconies = "On Front"
attr Win_Width = 3.0
attr Balcony_Width = 5.0
attr Win_Position = "Inside Flush"
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Stucco Redlands Brown"
attr Wall_Texture_Scaler = 2.0
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Color = "#808080"
attr Roof_Type = "Flat"
attr Sloped_Roof_Texture = "Standard Dura Shingle"
attr Flat_Roof_Texture = "Green Roof"
attr Roof_Texture_Scale = 0.1
attr Roof_Overhang = 1.0



style Redlands_Office_1
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_A = "[WO]*W"
attr Balconies = "On Front"
attr Win_Width = 3.0
attr Balcony_Width = 5.0
attr Win_Position = "Inside Flush"
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Stucco Redlands Brown"
attr Wall_Texture_Scaler = 2.0
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Color = "#808080"
attr Roof_Type = "Gable"
attr Sloped_Roof_Texture = "Standard Dura Shingle"
attr Flat_Roof_Texture = "Green Roof"
attr Roof_Texture_Scale = 0.1
attr Roof_Overhang = 0.1
attr Sloped_Roof_Angle = 20.0



style Redlands_Mixed_Use_Green_Building
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_A = "[WO]*W"
attr Main_Pattern_B = "[WO]*W"
attr Win_Width = 3.0
attr Win_Position = "Wall Center"
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Brown No Mortar Running Bond"
attr Parapet_Height = 0.0
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Color = "#FF8080"
attr Roof_Type = "Flat"
attr Sloped_Roof_Texture = "Shingle Black"
attr Flat_Roof_Texture = "Green Roof"
attr Roof_Texture_Scale = 0.1


style Redlands_Residential_3
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Balconies = "On Front"
attr Win_Width = 3.0
attr Balcony_Width = 5.0
attr Panel_Width = 1.0
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Red No Mortar Running Bond"
attr Wall_Texture_Scaler = 0.5
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Extension_Upper = 0.57
attr Awning_Color = "#804040"
attr Roof_Type = "Gable"
attr Sloped_Roof_Texture = "Shingle Black"
attr Roof_Overhang = 0.01


style Redlands_Residential_4
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Balconies = "None"
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Brown Running Bond"
attr Wall_Texture_Scaler = 0.5
attr Awning_Type_Ground = "Shed"
attr Awning_Extension_Upper = 0.8
attr Awning_Color = "#B871FF"


style Redlands_Office_2
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Main_Pattern_A = "[WO]*W"
attr Balconies = "On Front"
attr Win_Width = 3.0
attr Cill_Height = 0.53
attr Wall_Width = 1.0
attr Balcony_Width = 5.0
attr Win_Position = "Inside Flush"
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Stucco Redlands White"
attr Wall_Texture_Scaler = 0.55
attr Awning_Type_Ground = "Shed"
attr Awning_Type_Upper = "Esri-Q"
attr Awning_Color = "#808080"
attr Roof_Type = "Gable"
attr Sloped_Roof_Texture = "Standard Dura Shingle"
attr Flat_Roof_Texture = "Green Roof"
attr Roof_Texture_Scale = 2.03
attr Roof_Overhang = 0.1
attr Sloped_Roof_Angle = 20.0


style Redlands_Residential_5
attr Generate_Facade = true
attr Level_of_Detail = "Medium"
attr Mass_Display = "Gradient-Up"
attr Balconies = "None"
attr Ground_Floor_Shopfront = false
attr Win_Width = 2.0
attr Frame_Color = "#FFFFFF"
attr Glass_Material = "iRay Glass"
attr Wall_Texture = "Brick Varied Brown Running Bond"
attr Wall_Texture_Scaler = 0.5
attr Awning_Type_Ground = "None"
attr Awning_Type_Upper = "None"
attr Awning_Extension_Upper = 0.8
attr Awning_Color = "#B871FF"
