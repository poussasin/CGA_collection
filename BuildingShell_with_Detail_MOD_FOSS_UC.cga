/**
 * File:    Building_Shell_with_Detail.cga
 * Created: 28 Feb 2015 19:48:27 GMT
 * Author:  chri7180
 */

version "2015.0" 

import Facade: "rules/BuildingsBETA/Referenced/Building_Facades_BETA.cga"
import Roof: "rules/BuildingsBETA/Referenced/Building_Roofs_BETA.cga"
import Interior: "rules/BuildingsBETA/Referenced/Building_Interiors_BETA.cga"
  
@Group("DISPLAY")
@Order(1)
attr ShowFacade = true
@Order(2)
attr ShowFloors = false 
#attr ShowStructure = true

@Group("FLOORS")

@Order(1)
attr Ground_Floor_Height = rand(3,5)
@Order(2)
attr Upper_Floor_Height = rand(3.2,4)
@Order(3)
attr Foundation_Height = 0.01
#@Range(0,20)
#attr DEBUGFloor = -1

@Group("ORIENTATION")

@Order(1)
attr DoorsFaceNorth = true 
@Order(2)
attr DoorsFaceSouth = true
@Order(3)
attr DoorsFaceWest = true
@Order(4)
attr DoorsFaceEast = true
# XX Above could be a description of what each face is like "Front", "Alley", etc....

@StartRule @InMesh 
BuildingMultipatch-->
	
	# Make scope align to world Y axis, since these shapes can have any alignment at start.
	alignScopeToAxes(y)
	
	# Cleanup geometry to get larger faces if possible.
	cleanupGeometry(edges, 0.5)
	# Remove the Roof faces before splitting floors, since there could be many top faces. 
	RoofsBeforeFloorSplits
	# Two building split methods - one for the shell, one to get floors. 
	[case ShowFacade: BuildingSplitFacadeShell else: NIL]
	[case ShowFloors: BuildingSplitFloors else: NIL]

BuildingSplitFacadeShell --> comp(f) {bottom: NIL | all= BuildingSplit("Shell")}
	
BuildingSplitFloors --> BuildingSplit("Floors")

# Use for both splits so that there is no redundant splitting code.
BuildingSplit(type) -->
	# Make scope align to world Y axis, since the previous split changed the scope.
	alignScopeToAxes(y)
	# Split the volume into Floors.
	split(y) {
		Foundation_Height: 
			set(_massType, "Foundation")
			set(_floorHeight, Foundation_Height)
			[case type == "Shell": FloorShell else: FloorMass] 
			NIL | 
		Ground_Floor_Height:
			set(_massType, "Ground")
			set(_floorHeight, Ground_Floor_Height)
			[case type == "Shell": FloorShell else: FloorMass]
			NIL | 
		{Upper_Floor_Height: 
			set(_massType, "Upper")
			set(_floorHeight, Upper_Floor_Height)
			[case type == "Shell": FloorShell else: FloorMass]
			NIL}* |
		~1: 
			set(_massType, "Extra")
			set(_floorHeight, 0) ## XX why did I make this zero?
			[case type == "Shell": FloorShell else: FloorMass]
			NIL	
	}
	

RoofsBeforeFloorSplits --> 
	case ShowFacade:
 		comp(f){aslant: Aslant | top: Top | all: NIL}
 	else: NIL

#attr _roofMin = 0.3
#attr _roofMinArea = 10
mappedArea = mapValuesToRange(geometry.area / (scope.sx*scope.sy),0,1,0,1)

Aslant -->
	Roof.SlopedRoofShape("") 

Top -->
	Roof.TopRoofShape("")
 
########


@Hidden
attr _massType = ""
@Hidden
attr _floorIndex = 0
@Hidden
attr _floorCount = 0
@Hidden
attr _floorHeight = 0 

FloorShell --> 
	#print(massType + " " + (split.index + "\t" + split.total))
	set(_floorIndex, split.index)
	set(_floorCount, split.total)
	comp(f) {bottom: NIL | top: NIL | all: FloorShellIsolate} 

FloorShellIsolate -->
	ImportedFacade
	#case DEBUGFloor == -1: ImportedFacade
	#case split.index == DEBUGFloor : ImportedFacade
	#else: NIL
 
ImportedFacade -->
	Facade.FloorFacades(_massType, _floorIndex, _floorCount, _floorHeight)
		
###################################
# Floor Slabs	

FloorMass --> 
	set(_floorIndex, split.index)
	set(_floorCount, split.total)
	comp(f) {top: Ceiling | bottom: Floor}

const ceilingToFloorHeight = 0.1

Ceiling -->
	#t(0, -ceilingToFloorHeight, 0)
	reverseNormals
	Interior.Ceiling(_massType, _floorIndex, _floorCount, _floorHeight)
	
Floor -->
	reverseNormals
	Interior.Floor(_massType, _floorIndex, _floorCount, _floorHeight)
	#[case split.index ==10: color(1,0,0) extrude(2) X. else: NIL] 





	
	

################################
# Normalization functions

constrainToRange(dataValueOriginal, minDataValue, maxDataValue) = 
	case dataValueOriginal < minDataValue: minDataValue
	case dataValueOriginal > maxDataValue: maxDataValue
	else: dataValueOriginal

mapValuesToRange(dataValue, fromRangeMin, fromRangeMax, toRangeMin, toRangeMax) = 
	toRangeMin + (((constrainToRange(dataValue, fromRangeMin, fromRangeMax) - fromRangeMin ) 
	* ( toRangeMax - toRangeMin )) / ( fromRangeMax - fromRangeMin))	
	
	
	
	
####################################
# TRASH PROBABLY:

	#case MakeHat:
	#	s('1,scope.sy + HatRise + HatThickness,'1)
	#	X. # XX Expand to have vertical elements here.
	   # XX Like the two large concrete walls in Esri building Q.
	#else: X.


#attr MakeHat = true
#attr HatRise = Upper_Floor_Height
#attr HatThickness = 0.2


#		color(colorRamp("greenToRed", mapValuesToRange(geometry.area / (scope.sx*scope.sy),0.1,0.5,0,1))) 
#		print(scope.sx*scope.sy + "\t" + geometry.area + "\t" + (geometry.area / (scope.sx*scope.sy)))
		
 	
